// /src/utils/calc.ts
import { Student, FitnessQuality, Benchmark } from '../types';

// —— 读取本地基准（IndexedDB 或 seed 导入后内存缓存） —— //
let _benchmarks: Benchmark[] = [];
export function setBenchmarks(bm: Benchmark[]) { _benchmarks = bm || []; }
function findBenchmark(q: FitnessQuality, age: number) {
  return _benchmarks.find(b =>
    b.quality === q && age >= b.ageMin && age <= b.ageMax
  );
}

// —— 速度段位（30s 单摇） —— //
export function evalSpeedRank(best30Single: number): number {
  const th = [60, 70, 80, 100, 110, 120, 150, 160, 170];
  let rank = 0;
  for (let i = 0; i < th.length; i++) {
    if (best30Single >= th[i]) rank = i + 1;
  }
  return rank; // 0=未入段, 1..9
}

export function maybeUpgradeRank(student: Student, best30Single: number) {
  const newRank = evalSpeedRank(best30Single);
  if (newRank > (student.currentRank || 0)) {
    student.currentRank = newRank;
  }
  return student.currentRank || 0;
}

// —— 花样通关积分（勇士进阶） —— //
// 简化策略：通过任意动作 +1 分；高段动作可按 rank*1.5 计（可根据需要调整）
export function freestylePassPoints(moveName: string, rank: number): number {
  if (!moveName) return 0;
  const base = 1;
  const bonus = Math.max(0, rank - 1) * 0.5;
  return base + bonus; // e.g. rank=5 → 1 + 2 = 3
}

// —— 年龄分位归一化（0..100） —— //
// 规则：p25=60, p50=75, p75=90，线性外插/内插（更细策略可换表）
export function normalizeByBenchmark(
  value: number,
  quality: FitnessQuality,
  age: number,
  unit: 'count' | 'cm' | 's' | 'grade' = 'count'
): { score: number; ref?: Benchmark } {
  const b = findBenchmark(quality, age);
  if (!b) return { score: Math.max(0, Math.min(100, value)), ref: undefined };
  let score = 0;
  if (value <= b.p25) {
    score = (value / b.p25) * 60;
  } else if (value <= b.p50) {
    score = 60 + 15 * ((value - b.p25) / (b.p50 - b.p25));
  } else if (value <= b.p75) {
    score = 75 + 15 * ((value - b.p50) / (b.p75 - b.p50));
  } else {
    score = 90 + 10 * ((value - b.p75) / Math.max(1, b.p75));
  }
  return { score: Math.max(0, Math.min(100, score)), ref: b };
}
